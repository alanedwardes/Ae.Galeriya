<h2>Upload Photos</h2>

<script>
    function readFile(file){
        return new Promise((resolve, reject) => {
            let fr = new FileReader();  
            fr.onload = () => {
                resolve(fr.result )
            };
            fr.onerror = reject;
            fr.readAsArrayBuffer(file);
        });
    }

    function digestToHex(hashBuffer) {
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    async function directorySelected(fileElement, statusElement) {
        fileElement.disabled = "disabled";
        fileElement.style.display = "none";

        let processedFiles = 0;
        let fileHashMap = {};
        for (const file of fileElement.files) {
            const contents = await readFile(file);
            const hashBuffer = await crypto.subtle.digest('SHA-256', contents);
            const hash = digestToHex(hashBuffer);
            processedFiles++;
            fileHashMap[hash] = file;
            statusElement.innerText = 'Processed ' + processedFiles + ' of ' + fileElement.files.length + ' files';
        }

        const fileHashes = Object.keys(fileHashMap);

        statusElement.innerText = 'Checking if any of the ' + fileHashes.length + ' unique files have already been uploaded';

        const hashPaths = {};
        for (const hash in fileHashMap) {
            const file = fileHashMap[hash];
            if (file.webkitRelativePath !== undefined) {
                hashPaths[hash] = file.webkitRelativePath;
            }
        }

        const response = await fetch('/api/v1/hashes:query', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(fileHashes)
        });

        const existingHashes = await response.json();

        for (const existingHash of existingHashes) {
            delete fileHashMap[existingHash];
        }

        let filesUploaded = 0;
        const filesToUpload = Object.keys(fileHashMap).length;

        for (const hash in fileHashMap) {
            statusElement.innerText = 'Uploading file ' + filesUploaded + ' of ' + filesToUpload;
            filesUploaded++;
            await uploadFile(fileHashMap[hash]);
        }

        await fetch('/api/v1/photos:paths', {
            method: 'PUT',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(hashPaths)
        });

        statusElement.innerText = 'All files uploaded';
    }

    async function uploadFile(file) {
        console.log(file);
        const formData = new FormData();
        formData.append('categoryId', '1');
        formData.append('file', file);
        formData.append('name', file.name);
        formData.append('createdOn', new Date(file.lastModified).toISOString());

        await fetch('/api/v1/photos:upload', {
            method: 'PUT',
            credentials: 'same-origin',
            body: formData
        });
    }
</script>

<input type="file" webkitdirectory onchange="directorySelected(this, document.getElementById('status'))" />

<p id="status"></p>